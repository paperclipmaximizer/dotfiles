;;; Compiled snippets and support files for `nand-hdl-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'nand-hdl-mode
		     '(("gate" "CHIP \\$0 {\nIN \\$1, \\$2;\nOUT out;\n\nPARTS:\n$5 (in=\\$1, out=\\$3);\n$6 (in=\\$2, out=\\$4);\n}" "gate" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/gate" nil nil)
		       ("Xor" "Xor(a=$1,b=$2,out=$3);$0" "Xor(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Xor" nil nil)
		       ("Screen" "Screen(in=$1,load=$2,address=$3,out=$4);$0" "Screen(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Screen" nil nil)
		       ("Register" "Register(in=$1,load=$2,out=$3);$0" "Register(in= ,load= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Register" nil nil)
		       ("ROM32K" "ROM32K(address=$1,out=$2);$0" "ROM32K(address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/ROM32K" nil nil)
		       ("RAM8" "RAM8(in=$1,load=$2,address=$3,out=$4);$0" "RAM8(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/RAM8" nil nil)
		       ("RAM64" "RAM64(in=$1,load=$2,address=$3,out=$4);$0" "RAM64(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/RAM64" nil nil)
		       ("RAM512" "RAM512(in=$1,load=$2,address=$3,out=$4);$0" "RAM512(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/RAM512" nil nil)
		       ("RAM4K" "RAM4K(in=$1,load=$2,address=$3,out=$4);$0" "RAM4K(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/RAM4K" nil nil)
		       ("RAM16K" "RAM16K(in=$1,load=$2,address=$3,out=$4);$0" "RAM16K(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/RAM16K" nil nil)
		       ("PC" "PC(in=$1,load=$2,inc=$3,reset=$4,out=$5);$0" "PC(in= ,load= ,inc= ,reset= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/PC" nil nil)
		       ("Or8Way" "Or8Way(in=$1,out=$2);$0" "Or8Way(in= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Or8Way" nil nil)
		       ("Or16" "Or16(a=$1,b=$2,out=$3);$0" "Or16(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Or16" nil nil)
		       ("Or" "Or(a=$1,b=$2,out=$3);$0" "Or(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Or" nil nil)
		       ("Not16" "Not16(in=$1,out=$2);$0" "Not16(in= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Not16" nil nil)
		       ("Not" "Not(in=$1,out=$2);$0" "Not(in= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Not" nil nil)
		       ("Nand" "Nand(a=$1,b=$2,out=$3);$0" "Nand(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Nand" nil nil)
		       ("Mux8Way16" "Mux8Way16(a=$1,b=$2,c=$3,d=$4,e=$5,f=$6,g=$7,h=$8,sel=$9,out=$10);$0" "Mux8Way16(a= ,b= ,c= ,d= ,e= ,f= ,g= ,h= ,sel= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Mux8Way16" nil nil)
		       ("Mux4Way16" "Mux4Way16(a=$1,b=$2,c=$3,d=$4,sel=$5,out=$6);$0" "Mux4Way16(a= ,b= ,c= ,d= ,sel= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Mux4Way16" nil nil)
		       ("Mux16" "Mux16(a=$1,b=$2,sel=$3,out=$4);$0" "Mux16(a= ,b= ,sel= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Mux16" nil nil)
		       ("Mux" "Mux(a=$1,b=$2,sel=$3,out=$4);$0" "Mux(a= ,b= ,sel= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Mux" nil nil)
		       ("Memory" "Memory(in=$1,load=$2,address=$3,out=$4);$0" "Memory(in= ,load= ,address= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Memory" nil nil)
		       ("Keyboard" "Keyboard(out=$1);$0" "Keyboard(out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Keyboard" nil nil)
		       ("Inc16" "Inc16(in=$1,out=$2);$0" "Inc16(in= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Inc16" nil nil)
		       ("HalfAdder" "HalfAdder(a=$1,b=$2,sum=$3,$4carry=$5);$0" "HalfAdder(a= ,b= ,sum= , carry= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/HalfAdder" nil nil)
		       ("FullAdder" "FullAdder(a=$1,b=$2,c=$3,sum=$4,carry=$5);$0" "FullAdder(a= ,b= ,c= ,sum= ,carry= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/FullAdder" nil nil)
		       ("DRegister" "DRegister(in=$1,load=$2,out=$3);$0" "DRegister(in= ,load= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/DRegister" nil nil)
		       ("DMux8Way" "DMux8Way(in=$1,sel=$2,a=$3,b=$4,c=$5,d=$6,e=$7,f=$8,g=$9,h=$10);$0" "DMux8Way(in= ,sel= ,a= ,b= ,c= ,d= ,e= ,f= ,g= ,h= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/DMux8Way" nil nil)
		       ("DMux4Way" "DMux4Way(in=$1,sel=$2,a=$3,b=$4,c=$5,d=$6);$0" "DMux4Way(in= ,sel= ,a= ,b= ,c= ,d= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/DMux4Way" nil nil)
		       ("DMux" "DMux(in=$1,sel=$2,a=$3,b=$4);$0" "DMux(in= ,sel= ,a= ,b= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/DMux" nil nil)
		       ("DFF" "DFF(in=$1,out=$2);$0" "DFF(in= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/DFF" nil nil)
		       ("CPU" "CPU(inM=$1,instruction=$2,reset=$3,outM=$4,writeM=$5,addressM=$6,pc=$7);$0" "CPU(inM= ,instruction= ,reset= ,outM= ,writeM= ,addressM= ,pc= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/CPU" nil nil)
		       ("Bit" "Bit(in=$1,load=$2,out=$3);$0" "Bit(in= ,load= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Bit" nil nil)
		       ("And16" "And16(a=$1,b=$2,out=$3);$0" "And16(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/And16" nil nil)
		       ("And" "And(a=$1,b=$2,out=$3);$0" "And(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/And" nil nil)
		       ("Add16" "Add16(a=$1,b=$2,out=$3);$0" "Add16(a= ,b= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/Add16" nil nil)
		       ("ARegister" "ARegister(in=$1,load=$2,out=$3);$0" "ARegister(in= ,load= ,out= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/ARegister" nil nil)
		       ("ALU" "ALU(x=$1,y=$2,zx=$3,nx=$4,zy=$5,ny=$6,f=$7,no=$8,out=$9,zr=$10,ng=$11);$0" "ALU(x= ,y= ,zx= ,nx= ,zy= ,ny= ,f= ,no= ,out= ,zr= ,ng= );" nil nil nil "/home/liam/.emacs.d/snippets/nand-hdl-mode/ALU" nil nil)))


;;; Do not edit! File generated at Sun Dec 24 10:56:39 2023
